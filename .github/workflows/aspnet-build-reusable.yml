name: Build Reusable Workflow

on:
  workflow_call:
    inputs:
      language:
        description: 'Programming language for the build'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        type: string
      dotnet-version:
        description: 'The .NET version to use'
        required: true
        type: string
    secrets:
      SONAR_TOKEN:
        required: true

jobs:
  build:
    runs-on: windows-latest  # Ambiente Windows

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"jpvieirah_aspnet-pipelines" /o:"jpvieirah" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          cd aspnet-pipelines
          dotnet build
          Get-Location
          dir
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore dependencies
        run: |
          cd aspnet-pipelines
          dotnet restore

      - name: Build project
        run: |
          cd aspnet-pipelines
          dotnet build --configuration Release

      - name: Run unit tests
        run: |
          cd aspnet-pipelines
          dotnet test --configuration Release

      - name: Publish project
        run: |
          cd aspnet-pipelines
          dotnet publish --configuration Release --output ./publish

      # Listar conteúdo da pasta de publicação para depuração
      - name: List publish directory contents
        run: |
          cd aspnet-pipelines
          echo "Listing contents of the publish directory:"
          dir ./publish

      # Se o diretório acima não funcionar, verifique outros caminhos possíveis
      - name: List bin/Release directory contents
        run: |
          cd aspnet-pipelines
          echo "Listing contents of the bin/Release directory:"
          dir ./bin/Release

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: aspnet-build
          path: aspnet-pipelines/publish  # Verifique se a pasta foi gerada e o caminho está correto
          if-no-files-found: warn
